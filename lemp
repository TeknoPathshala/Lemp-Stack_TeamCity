#!/bin/bash

# Update the server and install necessary packages
sudo apt update
sudo apt upgrade -y
sudo apt install -y nginx mysql-server mysql-client php-fpm php-mysql php-common php-cli php-gd php-json php-opcache php-mbstring php-curl php-xml php-zip

# Start and enable services
sudo systemctl start nginx
sudo systemctl enable nginx
sudo systemctl start mysql
sudo systemctl enable mysql
sudo systemctl start php7.4-fpm # Use the appropriate PHP version
sudo systemctl enable php7.4-fpm

# Secure MySQL installation
sudo mysql_secure_installation

# Configure Nginx server blocks (replace example.com and /var/www/your-site with actual values)
sudo cat <<EOF > /etc/nginx/sites-available/your-site.conf
server {
    listen 80;
    server_name 192.168.1.253;

    root /var/www/your-site;
    index index.php;

    location / {
        try_files $uri $uri/ /index.php?\$query_string;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php7.4-fpm.sock; # Use the appropriate PHP version
    }

    location ~ /\.ht {
        deny all;
    }
}
EOF

# Enable the Nginx site
sudo ln -s /etc/nginx/sites-available/your-site.conf /etc/nginx/sites-enabled/

# Test Nginx configuration and restart
sudo nginx -t
sudo systemctl restart nginx

# Deploy your application code (replace this with your deployment steps)
# Example: git clone or pull your application code from a repository

# Clean up any temporary files or configurations as needed

# You may also need to set up database and application configurations here

# Additional tasks can be added based on your specific deployment needs

# End of deployment script
